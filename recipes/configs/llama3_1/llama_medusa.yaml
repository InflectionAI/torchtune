# model_dir: /mnt/vast/share/inf2-training/experiments/3.1.2_dpo/job_id_12932/checkpoints/epoch_1

model_dir: /home/ubuntu/.llama/checkpoints/Llama3.1-8B-Instruct
output_dir: medusa_checkpoints/
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: ${model_dir}/tokenizer.model
dataset:
- _component_: torchtune.datasets.medusa_chat_dataset
  source: json
  data_files: /home/ubuntu/vanshaj/justpi.jsonl
  conversation_column: messages
  train_on_input: True
  packed: False
  conversation_style: openai
  split: train[:80%]  # Training data
dataset_val:
- _component_: torchtune.datasets.medusa_chat_dataset
  source: json
  data_files: /home/ubuntu/vanshaj/justpi.jsonl
  conversation_column: messages
  train_on_input: True
  packed: False
  conversation_style: openai
  split: train[99%:]  # Validation data

collate_fn: "torchtune.data.padded_collate_sft"

seed: 42
shuffle: true
model:
  _component_: torchtune.models.llama3_1.llama3_1_8b_medusa
checkpointer:
  _component_: torchtune.training.FullModelTorchTuneCheckpointer
  checkpoint_dir: ${model_dir}
  checkpoint_files: ["consolidated_torchtune.00.pth"]
  recipe_checkpoint: null
  output_dir: ${output_dir}
  model_type: LLAMA3
resume_from_checkpoint: false  # Ensure fresh start
batch_size: 8  # Reduced to avoid memory issues
epochs: 5
optimizer:
  _component_: torch.optim.AdamW
  lr: 1.0e-04
  fused: true
loss:
  _component_: torchtune.modules.loss.MedusaCrossEntropyLoss
lr_scheduler:
  _component_: torchtune.training.lr_schedulers.get_cosine_schedule_with_warmup
  num_warmup_steps: 20
max_steps_per_epoch: null
run_val_every_n_steps: 1000  # Run validation every 100 steps
batch_size_val: 16  # Validation batch size (can be higher than training)
save_best_checkpoint: true  # Save best checkpoint based on validation loss
val_checkpoint_dir: medusa_val_checkpoints/  # Directory for validation checkpoints
clip_grad_norm: 1.0  # Gradient clipping for stability
gradient_accumulation_steps: 3
device: cuda
enable_activation_checkpointing: true  # Disable to reduce complexity
enable_activation_offloading: false
custom_sharded_layers: ['tok_embeddings', 'output', 'medusa_heads']  # Include Medusa heads in FSDP sharding
fsdp_cpu_offload: false #true
fsdp_reshard_after_forward: false  # Use SHARD_GRAD_OP to reduce communication overhead
enable_async_checkpointing: false  # Use async checkpointing to avoid blocking
compile: false
optimizer_in_bwd: false
dtype: bf16
metric_logger:
  # _component_: torchtune.training.metric_logging.StdoutLogger
  _component_: torchtune.training.metric_logging.WandBLogger
  log_dir: ${output_dir}/logs
  project: torchtune

log_every_n_steps: 1  # Log every 100 steps instead of every step
log_peak_memory_stats: false  # Turn off memory logging
log_level: INFO  # Only show warnings and errors
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: false
  output_dir: ${output_dir}/profiling_outputs
  cpu: true
  cuda: true
  profile_memory: false
  with_stack: false
  record_shapes: true
  with_flops: false
  wait_steps: 5
  warmup_steps: 3
  active_steps: 2
  num_cycles: 1